// Developed by Eng Mouaz M AlShahmeh
import 'package:api_guide/api_guide.dart';
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'API Guide Flutter example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({super.key});

  @override
  Widget build(BuildContext context) {
    const String introduction = '''
In today's digital age, Application Programming Interfaces (APIs) play a fundamental role in connecting and enabling the exchange of data between different software applications and systems. API integration has become a key driver of innovation, allowing businesses to streamline processes, enhance functionality, and deliver seamless user experiences. This beginner's guide aims to demystify the world of API integration, offering a simple and accessible introduction for those new to the concept. Whether you're a developer looking to expand your skills or a non-technical professional seeking to understand the basics, this guide will walk you through the fundamental concepts, benefits, and steps involved in integrating APIs. By the end, you'll have a clear understanding of how APIs work and how they can empower your software projects. So, let's embark on this journey to unlock the potential of API integration, one step at a time.
    ''';
    return Scaffold(
      body: APIGuide().display(
        context: context,
        urlHost: 'https://example.com',
        apiItems: [
          const APIItem(
            request: APIGuideRequest(
              method: HttpRequestMethod.POST,
              params: [],
              body: [
                APIGuideRequestBody(
                  key: 'api_key',
                  value: 'abc123def456ghi789jkl0mno',
                  type: PropertyType.string,
                  description: '''
An API key is a crucial element for secure and controlled access to an application's or service's data and functionality. It is essentially a unique, alphanumeric string, usually generated by the service provider, which serves as a secret token. This string is required for authentication and authorization purposes when interacting with the API. When making API requests, you include this key in your request headers or parameters to prove your identity and gain access to the services or data you need. It acts as a digital signature that verifies your legitimacy, helping to maintain the security and integrity of the API. Without a valid API key, you'll typically be denied access, ensuring that only authorized users can utilize the API's resources. It's an essential component for developers and organizations to manage and protect their API endpoints effectively.
                ''',
                  isRequired: true,
                ),
              ],
              headers: [],
            ),
            response: [
              APIGuideResponse(
                statusCode: HttpResponseStatusCode.OK,
                headers: [],
                body: {
                  "data": [
                    {
                      "id": 1,
                      "name": "Item 1",
                      "description": "This is the first item in the list.",
                      "price": 19.99
                    },
                    {
                      "id": 2,
                      "name": "Item 2",
                      "description": "Here's the second item in the list.",
                      "price": 29.99
                    }
                  ]
                },
              ),
            ],
            title: 'Get All Data',
            urlPath: '/get-all',
            description: '''
To retrieve a list of all available resources from a web server, you can send an HTTP POST request to the 'get-all' endpoint, including a required 'api_key' attribute in the request body. This 'api_key' serves as a secure token to authenticate and authorize your access to the server's database or repository, allowing you to fetch all the data it holds. When you send the POST request with the 'api_key' in the request body, the server processes your request and responds with a collection of items, typically in a format like JSON or XML, depending on the server's configuration. You can use various programming languages and tools, such as Python's requests library or JavaScript's fetch function, to make this request. Once you receive the response, you can parse and manipulate the data as needed for your application. Remember that 'get-all' is just a placeholder for a real API endpoint; in practice, you'll replace it with the actual URL of the server you're interacting with, which provides access to the specific data you're interested in retrieving. The inclusion of the 'api_key' in the POST request body ensures secure and authorized access to the server's resources.            
''',
          ),
        ],
        apiFaqs: [
          APIGuideFAQ(
            question: 'What does API stand for, and what is its purpose?',
            answer:
                'API stands for Application Programming Interface. It is a set of rules and protocols that allow different software applications to communicate with each other. APIs enable you to access and use the functionality or data of other applications or services without having to understand their internal workings. Essentially, APIs are the bridges that connect different software components, making it easier to develop and enhance applications.',
          ),
          APIGuideFAQ(
            question:
                'What are the benefits of integrating an API into my application?',
            answer: '''
Integrating an API into your application offers several advantages:

1. Functionality Expansion: APIs enable you to add new features and capabilities to your application without having to build them from scratch. For instance, you can integrate a weather API to provide real-time weather updates in your app.
2. Data Access: APIs allow you to access and display external data, such as product information, user profiles, or location data, in your application. This is especially useful for applications that rely on up-to-date data.
3. Time and Cost Savings: API integration can significantly reduce development time and costs. Instead of writing complex code, you can leverage pre-built APIs to handle specific tasks or services.                
''',
          ),
          APIGuideFAQ(
            question:
                'How can I start integrating a dummy API into my application?',
            answer: '''
Integrating a dummy API is a simple process, and here are the basic steps to get you started:

1. Select a Dummy API: Find a dummy API that you want to integrate into your application. There are various online resources where you can discover dummy APIs for practice.
2. Get API Key or Token: Dummy APIs may not always require authentication, but some do. If the API you choose needs an API key or token, sign up on the API provider's website to obtain one.
3. Make API Requests: Use HTTP requests to interact with the API. Most APIs support common HTTP methods like GET, POST, PUT, and DELETE. For instance, you can use a GET request to fetch data from the API, or a POST request to submit data.
4. Handle API Responses: Process the data returned by the API. Responses are usually in JSON format, which can be easily parsed in most programming languages. You can then display the data in your application or use it as needed.
5. Error Handling: Be prepared to handle errors and exceptions that may occur during API requests. Proper error handling ensures that your application remains robust and responsive.
6. Testing and Debugging: Test your API integration thoroughly, checking for any issues or unexpected behavior. Debugging tools and logging can help identify and resolve problems.
7. Documentation: Read the API's documentation, if available. This will provide information on the endpoints, data formats, and usage guidelines, making integration smoother.
8. Security: If you're working with a real API, ensure that you handle sensitive data securely and follow best practices, such as using HTTPS for communication and protecting API keys.

In summary, integrating a dummy API is a valuable skill for any developer. It allows you to enhance your application's functionality and access external data easily. By following the steps outlined in this guide, you can start your journey toward becoming proficient in API integration. Remember to practice, experiment, and explore various APIs to expand your knowledge and capabilities.

Note: When working with real APIs, always be mindful of their terms of use and respect their rate limits to avoid any disruptions in service.
''',
          ),
        ],
        version: 0.1,
        latestUpdate: DateTime.now(),
        apiIntro: introduction,
      ),
    );
  }
}
